"""
Module Database - Gestion de la base de donn√©es ChromaDB pour l'Assistant R√©glementaire

Ce module fournit des outils complets pour la gestion de la base de donn√©es vectorielle
ChromaDB utilis√©e par l'Assistant R√©glementaire Automotive.

Fonctionnalit√©s disponibles:
- Ingestion de documents PDF depuis un dossier
- R√©sum√© et statistiques de la base de donn√©es  
- Recherche sp√©cifique par code de r√©glementation
- Nettoyage et vidage de la base de donn√©es
- Listage des r√©glementations disponibles
- Upload de nouveaux PDFs dans une base existante

Usage:
    from assistant_regulation.planning.Database import (
        PDFIngestionManager,
        DatabaseSummaryManager,
        RegulationSearchManager,
        DatabaseCleanupManager,
        RegulationListManager,
        PDFUploadManager
    )
"""

# Import des classes principales
from .pdf_ingestion import PDFIngestionManager
from .database_summary import DatabaseSummaryManager
from .regulation_search import RegulationSearchManager
from .database_cleanup import DatabaseCleanupManager
from .list_regulations import RegulationListManager
from .pdf_upload import PDFUploadManager

# Version du module
__version__ = "1.0.0"

# Exportation des classes principales
__all__ = [
    "PDFIngestionManager",
    "DatabaseSummaryManager", 
    "RegulationSearchManager",
    "DatabaseCleanupManager",
    "RegulationListManager",
    "PDFUploadManager",
    "check_database_health"
]


def get_database_manager(manager_type: str):
    """
    Factory function pour obtenir un gestionnaire de base de donn√©es
    
    Args:
        manager_type: Type de gestionnaire ('ingestion', 'summary', 'search', 
                     'cleanup', 'list', 'upload')
    
    Returns:
        Instance du gestionnaire demand√©
        
    Raises:
        ValueError: Si le type de gestionnaire est invalide
    """
    managers = {
        'ingestion': PDFIngestionManager,
        'summary': DatabaseSummaryManager,
        'search': RegulationSearchManager,
        'cleanup': DatabaseCleanupManager,
        'list': RegulationListManager,
        'upload': PDFUploadManager
    }
    
    if manager_type not in managers:
        raise ValueError(f"Type de gestionnaire invalide: {manager_type}. "
                        f"Types disponibles: {list(managers.keys())}")
    
    return managers[manager_type]()


def get_available_operations():
    """
    Retourne la liste des op√©rations disponibles
    
    Returns:
        Dict avec les op√©rations et leurs descriptions
    """
    return {
        "ingestion": {
            "description": "Ingestion initiale de documents PDF dans ChromaDB",
            "script": "pdf_ingestion.py",
            "class": "PDFIngestionManager",
            "operations": [
                "Traitement d'un dossier complet de PDFs",
                "Traitement d'un seul PDF",
                "Traitement parall√®le ou s√©quentiel",
                "V√©rification post-ingestion"
            ]
        },
        "summary": {
            "description": "R√©sum√© et statistiques de la base de donn√©es",
            "script": "database_summary.py", 
            "class": "DatabaseSummaryManager",
            "operations": [
                "Statistiques des collections",
                "Analyse des documents et r√©glementations",
                "Export du r√©sum√© en JSON",
                "Affichage d√©taill√© ou compact"
            ]
        },
        "search": {
            "description": "Recherche sp√©cifique par code de r√©glementation",
            "script": "regulation_search.py",
            "class": "RegulationSearchManager", 
            "operations": [
                "Recherche compl√®te d'une r√©glementation",
                "R√©sum√© rapide d'une r√©glementation",
                "Export des donn√©es en JSON/CSV/TXT",
                "Analyse du contenu (exigences, d√©finitions, etc.)"
            ]
        },
        "cleanup": {
            "description": "Nettoyage et vidage de la base de donn√©es",
            "script": "database_cleanup.py",
            "class": "DatabaseCleanupManager",
            "operations": [
                "Vidage d'une collection sp√©cifique",
                "Vidage de toutes les collections", 
                "Suppression physique des fichiers DB",
                "Nettoyage s√©lectif par r√©glementation",
                "Nettoyage des fichiers cache"
            ]
        },
        "list": {
            "description": "Listage des r√©glementations disponibles",
            "script": "list_regulations.py",
            "class": "RegulationListManager",
            "operations": [
                "Liste compl√®te des r√©glementations",
                "Affichage d√©taill√© avec statistiques",
                "Filtrage par crit√®res (chunks, images, tables)",
                "Export en JSON/CSV/TXT"
            ]
        },
        "upload": {
            "description": "Upload de nouveaux PDFs dans base existante",
            "script": "pdf_upload.py", 
            "class": "PDFUploadManager",
            "operations": [
                "Upload d'un seul PDF",
                "Upload multiple depuis dossier",
                "Copie automatique dans dossier Data",
                "V√©rification de l'√©tat de la base existante"
            ]
        }
    }


def print_module_info():
    """Affiche les informations sur le module Database"""
    print("=" * 70)
    print("    MODULE DATABASE - ASSISTANT R√âGLEMENTAIRE")
    print("=" * 70)
    print(f"Version: {__version__}")
    print("\nGestionnaires disponibles:")
    
    operations = get_available_operations()
    
    for op_type, info in operations.items():
        print(f"\nüîß {op_type.upper()}:")
        print(f"   Description: {info['description']}")
        print(f"   Script: {info['script']}")
        print(f"   Classe: {info['class']}")
        print("   Op√©rations:")
        for operation in info['operations']:
            print(f"     ‚Ä¢ {operation}")
    
    print("\n" + "=" * 70)
    print("Usage:")
    print("  python -m assistant_regulation.planning.Database.<script_name> --help")
    print("  ou")
    print("  from assistant_regulation.planning.Database import <ManagerClass>")
    print("=" * 70)


# Fonction utilitaire pour v√©rifier l'√©tat g√©n√©ral de la base
def check_database_health():
    """
    V√©rifie l'√©tat g√©n√©ral de la base de donn√©es
    
    Returns:
        Dict avec les informations de sant√© de la DB
    """
    try:
        summary_manager = DatabaseSummaryManager()
        summary = summary_manager.get_complete_summary()
        
        health_status = {
            "healthy": True,
            "collections_status": {},
            "total_documents": 0,
            "total_regulations": 0,
            "issues": []
        }
        
        # V√©rifier les collections
        collections = summary.get("collections", {})
        for col_type, col_info in collections.items():
            if isinstance(col_info, dict):
                exists = col_info.get("exists", False)
                count = col_info.get("count", 0)
                
                health_status["collections_status"][col_type] = {
                    "exists": exists,
                    "count": count,
                    "healthy": exists and count > 0
                }
                
                if not exists:
                    health_status["issues"].append(f"Collection {col_type} n'existe pas")
                elif count == 0:
                    health_status["issues"].append(f"Collection {col_type} est vide")
                else:
                    health_status["total_documents"] += count
        
        # V√©rifier les r√©glementations
        regulations = summary.get("regulations", {})
        health_status["total_regulations"] = regulations.get("total_regulations", 0)
        
        if health_status["total_regulations"] == 0:
            health_status["issues"].append("Aucune r√©glementation trouv√©e")
        
        # D√©terminer la sant√© g√©n√©rale
        if health_status["total_documents"] == 0:
            health_status["healthy"] = False
            health_status["issues"].append("Base de donn√©es vide")
        
        return health_status
        
    except Exception as e:
        return {
            "healthy": False,
            "error": str(e),
            "issues": [f"Erreur lors de la v√©rification: {e}"]
        }