"""
Composant de monitoring des t√¢ches asynchrones
Interface Streamlit pour suivre les t√¢ches en cours et termin√©es
"""

import streamlit as st
import time
from datetime import datetime, timedelta
from typing import List, Optional
from utils.task_manager import get_task_manager, TaskStatus, TaskInfo


def render_task_monitor(show_completed: bool = True, max_tasks: int = 20, key_prefix: str = "main"):
    """
    Affiche le moniteur de t√¢ches dans la sidebar ou en section principale
    
    Args:
        show_completed: Afficher les t√¢ches termin√©es
        max_tasks: Nombre maximum de t√¢ches √† afficher
        key_prefix: Pr√©fixe pour les cl√©s d'√©l√©ments (√©viter les doublons)
    """
    task_manager = get_task_manager()
    
    # Nettoyer les anciennes t√¢ches termin√©es
    task_manager.cleanup_completed_tasks()
    
    # R√©cup√©rer les t√¢ches
    active_tasks = task_manager.get_active_tasks()
    all_tasks = task_manager.get_all_tasks()
    
    # Filtrer et trier les t√¢ches
    if show_completed:
        display_tasks = sorted(all_tasks, key=lambda t: t.started_at or datetime.min, reverse=True)[:max_tasks]
    else:
        display_tasks = active_tasks
    
    # En-t√™te avec compteurs
    active_count = len(active_tasks)
    
    if active_count > 0:
        st.markdown(f"""
        <div style="background: linear-gradient(90deg, #2ecc71, #27ae60); color: white; 
                    padding: 10px; border-radius: 8px; margin-bottom: 15px;">
            <strong>üîÑ {active_count} t√¢che(s) en cours</strong>
        </div>
        """, unsafe_allow_html=True)
    
    # Affichage des t√¢ches
    if not display_tasks:
        st.info("Aucune t√¢che en cours" if not show_completed else "Aucune t√¢che")
        return
    
    # Grouper par statut
    running_tasks = [t for t in display_tasks if t.status == TaskStatus.RUNNING]
    pending_tasks = [t for t in display_tasks if t.status == TaskStatus.PENDING]
    completed_tasks = [t for t in display_tasks if t.status in [TaskStatus.COMPLETED, TaskStatus.FAILED, TaskStatus.CANCELLED]]
    
    # T√¢ches en cours d'ex√©cution
    if running_tasks:
        st.markdown("### üîÑ En cours")
        for i, task in enumerate(running_tasks):
            render_task_card(task, expanded=True, key_prefix=f"{key_prefix}_running_{i}")
    
    # T√¢ches en attente
    if pending_tasks:
        st.markdown("### ‚è≥ En attente")
        for i, task in enumerate(pending_tasks):
            render_task_card(task, expanded=False, key_prefix=f"{key_prefix}_pending_{i}")
    
    # T√¢ches termin√©es (si demand√©es)
    if show_completed and completed_tasks:
        with st.expander(f"üìã Historique ({len(completed_tasks)} t√¢ches)", expanded=False):
            for i, task in enumerate(completed_tasks[:10]):  # Limiter l'historique
                render_task_card(task, expanded=False, show_details=False, key_prefix=f"{key_prefix}_completed_{i}")


def render_task_card(task: TaskInfo, expanded: bool = False, show_details: bool = True, key_prefix: str = "card"):
    """
    Affiche une carte pour une t√¢che individuelle
    
    Args:
        task: Information de la t√¢che
        expanded: Afficher les d√©tails par d√©faut
        show_details: Afficher les d√©tails complets
        key_prefix: Pr√©fixe pour les cl√©s d'√©l√©ments
    """
    # Ic√¥ne et couleur selon le statut
    status_config = {
        TaskStatus.PENDING: {"icon": "‚è≥", "color": "#f39c12"},
        TaskStatus.RUNNING: {"icon": "üîÑ", "color": "#3498db"},
        TaskStatus.COMPLETED: {"icon": "‚úÖ", "color": "#2ecc71"},
        TaskStatus.FAILED: {"icon": "‚ùå", "color": "#e74c3c"},
        TaskStatus.CANCELLED: {"icon": "‚èπÔ∏è", "color": "#95a5a6"}
    }
    
    config = status_config.get(task.status, {"icon": "‚ùì", "color": "#7f8c8d"})
    
    # Calculer la dur√©e
    duration_text = ""
    if task.started_at:
        if task.completed_at:
            duration = task.completed_at - task.started_at
            duration_text = f" ({format_duration(duration)})"
        elif task.status == TaskStatus.RUNNING:
            duration = datetime.now() - task.started_at
            duration_text = f" ({format_duration(duration)})"
    
    # En-t√™te de la t√¢che
    header_html = f"""
    <div style="display: flex; align-items: center; margin-bottom: 10px;">
        <span style="font-size: 20px; margin-right: 8px;">{config['icon']}</span>
        <strong style="color: {config['color']};">{task.name}</strong>
        <span style="color: #7f8c8d; font-size: 0.9em; margin-left: auto;">{duration_text}</span>
    </div>
    """
    
    if show_details:
        with st.expander(f"{config['icon']} {task.name}{duration_text}", expanded=expanded):
            st.markdown(header_html, unsafe_allow_html=True)
            
            # Message actuel
            if task.message:
                st.write(f"üìù **Statut:** {task.message}")
            
            # Barre de progression
            if task.status == TaskStatus.RUNNING:
                progress_pct = int(task.progress * 100)
                st.progress(task.progress)
                st.write(f"‚ö° **Progression:** {progress_pct}%")
            
            # Informations d√©taill√©es
            col1, col2 = st.columns(2)
            
            with col1:
                st.write(f"üÜî **ID:** `{task.id}`")
                if task.started_at:
                    st.write(f"üïê **D√©marr√©:** {task.started_at.strftime('%H:%M:%S')}")
            
            with col2:
                st.write(f"üìä **√âtat:** {task.status.value.capitalize()}")
                if task.completed_at:
                    st.write(f"üèÅ **Termin√©:** {task.completed_at.strftime('%H:%M:%S')}")
            
            # R√©sultats ou erreurs
            if task.status == TaskStatus.COMPLETED and task.result:
                with st.expander("üìä R√©sultats", expanded=False):
                    display_task_results(task.result)
            
            elif task.status == TaskStatus.FAILED and task.error:
                st.error(f"‚ùå **Erreur:** {task.error}")
            
            # Actions
            if task.status in [TaskStatus.PENDING, TaskStatus.RUNNING]:
                if st.button(f"‚èπÔ∏è Annuler", key=f"cancel_{key_prefix}_{task.id}"):
                    task_manager = get_task_manager()
                    if task_manager.cancel_task(task.id):
                        st.success("T√¢che annul√©e")
                        st.rerun()
    else:
        # Affichage compact
        status_text = task.status.value.capitalize()
        st.write(f"{config['icon']} **{task.name}** - {status_text}{duration_text}")


def display_task_results(result: dict):
    """Affiche les r√©sultats d'une t√¢che termin√©e"""
    if not result:
        st.info("Aucun r√©sultat disponible")
        return
    
    task_type = result.get("type", "unknown")
    
    if task_type == "upload":
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Fichiers trait√©s", result.get("successful_uploads", 0))
        with col2:
            st.metric("Total fichiers", result.get("total_files", 0))
        with col3:
            st.metric("Chunks ajout√©s", result.get("total_chunks_added", 0))
        
        errors = result.get("errors", [])
        if errors:
            st.warning(f"‚ö†Ô∏è {len(errors)} erreur(s) rencontr√©e(s)")
            with st.expander("D√©tails des erreurs", expanded=False):
                for error in errors[:5]:  # Limiter l'affichage
                    st.write(f"‚Ä¢ {error}")
    
    elif task_type == "folder_ingestion":
        if result.get("success"):
            st.success("‚úÖ Ingestion termin√©e avec succ√®s")
            
            stats = result.get("stats", {})
            if stats:
                st.json(stats)
        else:
            st.error("‚ùå √âchec de l'ingestion")
    
    elif task_type == "ingestion":
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("Fichiers trait√©s", result.get("successful_uploads", 0))
        with col2:
            st.metric("Total fichiers", result.get("total_files", 0))


def render_task_notifications():
    """Affiche les notifications de t√¢ches dans la sidebar"""
    task_manager = get_task_manager()
    active_tasks = task_manager.get_active_tasks()
    
    if not active_tasks:
        return
    
    # Notification compacte dans la sidebar
    st.sidebar.markdown("---")
    st.sidebar.markdown("### üîÑ T√¢ches Actives")
    
    for i, task in enumerate(active_tasks):
        if task.status == TaskStatus.RUNNING:
            progress_pct = int(task.progress * 100)
            st.sidebar.write(f"üîÑ {task.name}")
            st.sidebar.progress(task.progress, key=f"sidebar_progress_{i}_{task.id}")
            st.sidebar.caption(f"{progress_pct}% - {task.message}")
        else:
            st.sidebar.write(f"‚è≥ {task.name}")
            st.sidebar.caption("En attente...")
    
    # Bouton pour rafra√Æchir
    if st.sidebar.button("üîÑ Actualiser", key="refresh_tasks_sidebar"):
        st.rerun()


def format_duration(duration: timedelta) -> str:
    """Formate une dur√©e pour affichage"""
    total_seconds = int(duration.total_seconds())
    
    if total_seconds < 60:
        return f"{total_seconds}s"
    elif total_seconds < 3600:
        minutes = total_seconds // 60
        seconds = total_seconds % 60
        return f"{minutes}m {seconds}s"
    else:
        hours = total_seconds // 3600
        minutes = (total_seconds % 3600) // 60
        return f"{hours}h {minutes}m"


def auto_refresh_tasks(interval: int = 5):
    """
    Auto-refresh des t√¢ches toutes les X secondes
    √Ä utiliser avec st.empty() et une boucle
    """
    task_manager = get_task_manager()
    
    # V√©rifier s'il y a des t√¢ches actives
    active_tasks = task_manager.get_active_tasks()
    
    if active_tasks and 'last_task_refresh' in st.session_state:
        last_refresh = st.session_state.last_task_refresh
        if (datetime.now() - last_refresh).seconds >= interval:
            st.session_state.last_task_refresh = datetime.now()
            st.rerun()
    elif active_tasks:
        st.session_state.last_task_refresh = datetime.now()


def render_task_status_bar():
    """Affiche une barre de statut pour les t√¢ches actives"""
    task_manager = get_task_manager()
    active_tasks = task_manager.get_active_tasks()
    
    if not active_tasks:
        return
    
    running_count = len([t for t in active_tasks if t.status == TaskStatus.RUNNING])
    pending_count = len([t for t in active_tasks if t.status == TaskStatus.PENDING])
    
    # Barre de statut compacte
    status_html = f"""
    <div style="
        position: fixed;
        bottom: 20px;
        right: 20px;
        background: rgba(52, 73, 94, 0.95);
        color: white;
        padding: 10px 15px;
        border-radius: 25px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        z-index: 1000;
        font-size: 14px;
        backdrop-filter: blur(10px);
    ">
        üîÑ {running_count} en cours ‚Ä¢ ‚è≥ {pending_count} en attente
    </div>
    """
    
    st.markdown(status_html, unsafe_allow_html=True)